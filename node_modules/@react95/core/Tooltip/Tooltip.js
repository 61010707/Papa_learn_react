"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Tip = _styledComponents.default.div.withConfig({
  displayName: "Tooltip__Tip",
  componentId: "sc-12td8lj-0"
})(["background:radial-gradient(#ff0 20%,transparent 20%) 0 0,radial-gradient(#ff0 20%,transparent 20%) 4px 4px,radial-gradient(rgba(255,255,255,0.1) 20%,transparent 25%) 0 1px,radial-gradient(rgba(255,255,255,0.1) 20%,transparent 25%) 3px 4px;background-size:7px 7px;background-color:#fff;border:1px solid #000;padding:2px 2px 2px 4px;position:absolute;top:-20px;text-align:center;z-index:100;display:", ";"], function (_ref) {
  var show = _ref.show;
  return show ? 'block' : 'none';
});

var Wrapper = _styledComponents.default.div.withConfig({
  displayName: "Tooltip__Wrapper",
  componentId: "sc-12td8lj-1"
})(["display:inline-block;position:relative;cursor:default;white-space:nowrap;"]);

var Tooltip = function Tooltip(_ref2) {
  var children = _ref2.children,
      text = _ref2.text,
      delay = _ref2.delay;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      show = _useState2[0],
      setShow = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      delayTimer = _useState4[0],
      setDelayTimer = _useState4[1];

  var handleEnter = function handleEnter() {
    var timer = setTimeout(function () {
      setShow(true);
    }, delay);
    setDelayTimer(timer);
  };

  var handleLeave = function handleLeave() {
    clearTimeout(delayTimer);
    setShow(false);
  };

  return _react.default.createElement(Wrapper, {
    onMouseEnter: handleEnter,
    onMouseLeave: handleLeave
  }, _react.default.createElement(Tip, {
    show: show
  }, text), children);
};

function formatDate(date) {
  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var day = date.getDate();
  var monthIndex = date.getMonth();
  var year = date.getFullYear();
  return day.toString().padStart(2, '0') + ' ' + monthNames[monthIndex] + ' ' + year;
}

Tooltip.propTypes = {
  children: _propTypes.default.node.isRequired,
  text: _propTypes.default.string,
  delay: _propTypes.default.number
};
Tooltip.defaultProps = {
  delay: 1000,
  text: formatDate(new Date())
};
var _default = Tooltip;
exports.default = _default;